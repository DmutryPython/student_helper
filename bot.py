import os
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from audio_processor import AudioProcessor
# from text_analyzer import TextAnalyzer
# from report_generator import ReportGenerator
import config
from dotenv import load_dotenv

load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_TEXT, WAITING_VOICE = 0, 1


class SpeechAnalystBot:
    def __init__(self):
        self.audio_processor = AudioProcessor()

        self.user_data = {}
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
        user = update.message.from_user
        self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥.", user.first_name)

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        chat_id = update.effective_chat.id
        if chat_id in self.user_data:
            del self.user_data[chat_id]

        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Ç–≤–æ–∏ —É—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —É—á–µ–±–Ω–∏–∫–∞), "
            "–∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å."
        )

        return WAITING_TEXT

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        chat_id = update.effective_chat.id
        text = update.message.text


        self.user_data[chat_id] = {"paragraph": text}
        self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: %s", chat_id, text[:50] + "...")

        await update.message.reply_text(
            "‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
            "—Å —Ç–≤–æ–∏–º —É—Å—Ç–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."
        )

        return WAITING_VOICE

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        chat_id = update.effective_chat.id
        self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", chat_id)


        if chat_id not in self.user_data or "paragraph" not in self.user_data[chat_id]:
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∫–æ–º–∞–Ω–¥–æ–π /start!"
            )
            return WAITING_TEXT

        try:

            voice_file = await update.message.voice.get_file()
            audio_path = f"temp_{chat_id}.ogg"
            await voice_file.download_to_drive(audio_path)


            await update.message.reply_text("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –æ—Ç–≤–µ—Ç...")

            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            user_text = self.audio_processor.transcribe_audio(audio_path)
            self.logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: %s", user_text[:100] + "...")

            # –ê–Ω–∞–ª–∏–∑
            paragraph = self.user_data[chat_id]["paragraph"]



            # report = ReportGenerator.generate(structure, parasites)
            report = paragraph  + user_text
            await update.message.reply_text(report)


            os.remove(audio_path)
            del self.user_data[chat_id]


            await update.message.reply_text(
                "üîÑ –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–º? –û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞!"
            )

            return ConversationHandler.END

        except Exception as e:
            self.logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %s", str(e))
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start."
            )


            return WAITING_VOICE

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
        user = update.message.from_user
        self.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.", user.first_name)

        chat_id = update.effective_chat.id
        if chat_id in self.user_data:
            del self.user_data[chat_id]

        await update.message.reply_text(
            "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å /start"
        )

        return ConversationHandler.END

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        self.logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", context.error)

        if update.message:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start."
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –¥–∏–∞–ª–æ–≥–∞"""
        app = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()


        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                WAITING_TEXT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text),
                    CommandHandler('cancel', self.cancel)
                ],
                WAITING_VOICE: [
                    MessageHandler(filters.VOICE, self.handle_voice),
                    CommandHandler('cancel', self.cancel)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )

        app.add_handler(conv_handler)
        app.add_error_handler(self.error_handler)

        app.run_polling()


if __name__ == "__main__":
    bot = SpeechAnalystBot()
    bot.run()